<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" id="WebApp_ID" version="3.1">
  <display-name>Ozo</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
 <!-- #1
 # ========================================================================================================
 #	<스프링 비 사용시>
 #		요청하는 Class의 첫번째 글자가 소문자로 DispatcherServlet 객체를 생성한다.
 #		호출시에는 반드시 .do를 붙여줘야한다.
 #	<스프링 사용시>
 #		.do 안써도 된다. => <servlet-mapping>30번째줄 참고	
 # ========================================================================================================
 -->
  
  <servlet>
  	<servlet-name>action</servlet-name>
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/config/spring-view.xml</param-value>  	
  	</init-param>
  </servlet>
  <servlet-mapping>
  	<servlet-name>action</servlet-name>
  	<url-pattern>*.do</url-pattern>
  </servlet-mapping>
<!-- #2
# ======================================================================================================
#	ContextLoaderListener 객체를 호출함
# 		ContextLoaderListener 클래스는 스프링 설정 파일(디폴트에서 파일명 applicationContext.xml)을 로드하면 
#		ServletContextListener 인터페이스를 구현하고 있기 때문에 ServletContext 인스턴스 생성 시(톰켓으로 어플리케이션이 로드된 때)
#		에 호출된다.
#
#	<context-param>를 통해 /WEB-INF/config/spring.xml를 호출할 수 있고 이를 통해 여러가지를 구현할 수 있다.
#		우리 프로젝트에서는 Error페이지를 호출하기 위해 사용함
# ========================================================================================================
 -->
  <listener>
  	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener> 
   
  <context-param>
  	<param-name>contextConfigLocation</param-name>
  	<param-value>/WEB-INF/config/spring.xml</param-value>
  </context-param>

<!-- #3
# ======================================================================================================
#	Log4J를 사용한 listner. 2번과 같은 방식	
# ========================================================================================================
 -->
  
   <listener>
  	<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  
  <context-param>
  	<param-name>log4jConfigLocation</param-name>
  	<param-value>/WEB-INF/config/log4j.properties</param-value>
  </context-param>
  
<!-- #4
# ======================================================================================================
#	넘어오는 URL에 대한 인코딩 방법 정의	
#	<url-patter>을 통해 어디서부터 인코딩을 시작할지 정할 수 있다.
# ========================================================================================================
 -->  
  <filter>
  	<filter-name>enc</filter-name>
  	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
  	<init-param>
  		<param-name>encoding</param-name>
  		<param-value>EUC-KR</param-value>
  	</init-param>
  </filter>  
  
  <filter-mapping>
  	<filter-name>enc</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>    
</web-app>




